#include<iostream>
#include<vector>
#include<queue>
#include<algorithm>
using namespace std;

vector<int> edges[1001];
bool visit_d[1001], visit_b[1001];

void dfs(int v){
    cout << v << " ";
    visit_d[v] = true;
    for (int next : edges[v]) if(!visit_d[next]) dfs(next);
}

void bfs(int v){
    cout << '\n';
    queue<int> que;
    que.push(v);
    while(!que.empty()){
        int front = que.front();
        que.pop();
        if(visit_b[front]) continue;
        cout << front << " ";
        visit_b[front] = true;
        for (int next : edges[front]) que.push(next);
    }
}

int main(void){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    int n,m,v,a,b;
    cin >> n >> m >> v;
    for (int i = 0; i < m; i++) {
        cin >> a >> b;
        edges[a].push_back(b);
        edges[b].push_back(a);
    }
    for (int i = 0; i <= 1000; i++) {
        sort(edges[i].begin(),edges[i].end());
    }
    dfs(v);
    bfs(v);
}