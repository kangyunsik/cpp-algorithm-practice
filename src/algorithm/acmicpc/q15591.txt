#include<iostream>
#include<vector>
#include<queue>

using namespace std;

// cost, dest [start]
vector<pair<int, int>> edges[5001];
int visit[5001];

void init_visit(){
    for (int i = 0; i <= 5000; i++) visit[i] = 0;
}

int main(void){
    int n, q, a, b, u, k, v;
    cin >> n >> q;
    for (int i = 0; i < n - 1; i++) {
        cin >> a >> b >> u;
        edges[a].push_back(make_pair(u,b));
        edges[b].push_back(make_pair(u,a));
    }

    for (int i = 0; i < q; i++) {
        cin >> k >> v;
        int sum = 0, dest;
        // cost , dest
        priority_queue<pair<int,int>> pq;
        init_visit();
        pq.push(make_pair(0,v));
        do{
            dest = pq.top().second;
            pq.pop();
            sum++;
            visit[dest] = 1;
            for (int j = 0; j < edges[dest].size(); j++) {
                int nCost = edges[dest][j].first;
                int nDest = edges[dest][j].second;
                if(!visit[edges[dest][j].second] && nCost >= k){
                    pq.push(make_pair(-nCost, nDest));
                }
            }
        }while(!pq.empty());

        cout << sum - 1 << '\n';
    }
}