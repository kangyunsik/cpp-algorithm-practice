#include <iostream>
#include <vector>
#include <queue>

#define INF 1000000000;
using namespace std;
using pii = pair<int, int>;

int dist[51];

int solution(int N, vector<vector<int> > road, int K) {
    int answer = 0;
    for (int i = 1; i <= 50; i++) dist[i] = INF;
    priority_queue<pii> pq; // cost, dest
    pq.push(pii(0, 1));
    dist[1] = 0;
    while (!pq.empty()) {
        int cost = pq.top().first;
        int dest = pq.top().second;
        pq.pop();
        if (cost > dist[dest]) continue;
        for (int i = 0; i < road.size(); i++) {
            if(dest == road[i][0] || dest == road[i][1]){
                int nCost = road[i][2]; int nDest = road[i][1];
                if(dest == road[i][1]) nDest = road[i][0];
                if(nCost + cost < dist[nDest]){
                    dist[nDest] = nCost + cost;
                    pq.push(pii(dist[nDest],nDest));
                }
            }
        }
    }

    for (int i = 1; i <= N; i++) if(dist[i] <= K) answer++;

    return answer;
}

int main(void) {
    vector<vector<int>> v = {{1,2,1},{2,3,3},{5,2,2},{1,4,2},{5,3,1},{5,4,2}};
    cout << solution(5,v,3) << endl;
}